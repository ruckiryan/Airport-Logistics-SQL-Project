-- FULL CREATE + RESET + RELOAD SCRIPT FOR LOGPLAN DATABASE

-- PART 1: CREATE DATABASE AND TABLES
IF NOT EXISTS(SELECT * FROM sys.databases WHERE NAME = N'Logplan')
    CREATE DATABASE Logplan;
GO
USE Logplan;
GO
-- Set data path (no changes needed based on user input)
--
DECLARE @data_path NVARCHAR(256);
SELECT @data_path = 'C:\Users\12rru\Downloads\ProjectPart1_Rucki\';

-- Drop tables in reverse dependency order if needed
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'PE_DETAIL') DROP TABLE PE_DETAIL;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'PS_DETAIL') DROP TABLE PS_DETAIL;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'SERVICE_EQUIPMENT') DROP TABLE SERVICE_EQUIPMENT;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'SERVICE') DROP TABLE [SERVICE];
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'EQUIPMENT') DROP TABLE EQUIPMENT;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'PROJECT') DROP TABLE PROJECT;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'AIRPORT') DROP TABLE AIRPORT;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'EMPLOYEE') DROP TABLE EMPLOYEE;
IF EXISTS(SELECT * FROM sys.tables WHERE name = N'CLIENT') DROP TABLE CLIENT;

-- Create tables
CREATE TABLE CLIENT (
    CLIENT_ID INT PRIMARY KEY,
    FIRST_NAME NVARCHAR(50),
    LAST_NAME NVARCHAR(50),
    EMAIL NVARCHAR(100),
    ADDRESS NVARCHAR(100),
    PHONE_NUMBER NVARCHAR(20),
    CITY NVARCHAR(50),
    STATE NVARCHAR(50),
    ZIP_CODE NVARCHAR(10)
);

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID INT PRIMARY KEY,
    EMP_QUALIFICATION NVARCHAR(100),
    EMP_FIRST_NAME NVARCHAR(50),
    EMP_LAST_NAME NVARCHAR(50),
    EMP_ADDRESS NVARCHAR(100),
    EMP_EMAIL NVARCHAR(100)
);

CREATE TABLE AIRPORT (
    AIRPORT_ID INT PRIMARY KEY,
    AIRPORT_LEVEL NVARCHAR(20),
    A_LONG FLOAT,
    A_LAT FLOAT,
    AIRPORT_CODE NVARCHAR(10),
    CONTINENT NVARCHAR(10)
);

CREATE TABLE PROJECT (
    PROJECT_ID INT PRIMARY KEY,
    CLIENT_ID INT FOREIGN KEY REFERENCES CLIENT(CLIENT_ID),
    AIRPORT_ID INT FOREIGN KEY REFERENCES AIRPORT(AIRPORT_ID),
    PROJECT_BUDGET FLOAT,
    PROJECT_STATUS NVARCHAR(20),
    PROJECT_DESCRIPTION NVARCHAR(MAX)
);

CREATE TABLE EQUIPMENT (
    EQUIPMENT_ID INT PRIMARY KEY,
    EQUIPMENT_NAME NVARCHAR(100),
    EQUIPMENT_TYPE NVARCHAR(50),
    REPLACEMENT_VALUE FLOAT,
    INVENTORY INT
);

CREATE TABLE [SERVICE] (
    SERVICE_ID INT PRIMARY KEY,
    SERVICE_LEVEL NVARCHAR(50),
    SERVICE_NAME NVARCHAR(100),
    SERVICE_COST FLOAT,
    SERVICE_DESCRIPTION NVARCHAR(MAX),
    EQUIPMENT_REQUIRED NVARCHAR(10)
);

CREATE TABLE SERVICE_EQUIPMENT (
    SE_ID INT PRIMARY KEY,
    SERVICE_ID INT FOREIGN KEY REFERENCES [SERVICE](SERVICE_ID),
    EQUIPMENT_ID INT FOREIGN KEY REFERENCES EQUIPMENT(EQUIPMENT_ID),
    EquipmentAmount INT
);

CREATE TABLE PS_DETAIL (
    PS_DETAIL_ID INT PRIMARY KEY,
    PROJECT_ID INT FOREIGN KEY REFERENCES PROJECT(PROJECT_ID),
    SERVICE_ID INT FOREIGN KEY REFERENCES [SERVICE](SERVICE_ID),
    PS_START_DATE DATE,
    PS_END_DATE DATE,
    QUANTITY INT
);

CREATE TABLE PE_DETAIL (
    PE_DETAIL_ID INT PRIMARY KEY,
    PROJECT_ID INT FOREIGN KEY REFERENCES PROJECT(PROJECT_ID),
    EMPLOYEE_ID INT FOREIGN KEY REFERENCES EMPLOYEE(EMPLOYEE_ID),
    BILLABLE_RATE FLOAT,
    HOUR_WORKED FLOAT
);

-- PART 2: DELETE EXISTING DATA AND RELOAD
-- STEP 1: Delete all existing data in proper FK order
DELETE FROM PE_DETAIL;
DELETE FROM PS_DETAIL;
DELETE FROM SERVICE_EQUIPMENT;
DELETE FROM [SERVICE];
DELETE FROM EQUIPMENT;
DELETE FROM PROJECT;
DELETE FROM AIRPORT;
DELETE FROM EMPLOYEE;
DELETE FROM CLIENT;



-- STEP 3: Re-insert data into all 9 tables
EXECUTE (N'BULK INSERT CLIENT FROM ''' + @data_path + N'clientDATA.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT EMPLOYEE FROM ''' + @data_path + N'employeeDATA.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT AIRPORT FROM ''' + @data_path + N'airportDATA.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT PROJECT FROM ''' + @data_path + N'project.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT EQUIPMENT FROM ''' + @data_path + N'equipmentDATA.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

INSERT INTO [SERVICE] (SERVICE_ID, SERVICE_LEVEL, SERVICE_NAME, SERVICE_COST, SERVICE_DESCRIPTION, EQUIPMENT_REQUIRED)
VALUES (30001, 'Update', 'Handbag System Update', 45000.0, 'Modify Handbag System, Check for any points of issue in the system', 'Yes');

INSERT INTO [SERVICE] (SERVICE_ID, SERVICE_LEVEL, SERVICE_NAME, SERVICE_COST, SERVICE_DESCRIPTION, EQUIPMENT_REQUIRED)
VALUES (30002, 'Installation', 'Automated People Mover Installment ', 545600.8, 'Implement  Automated  People Mover, transport travelers across terminals', 'Yes');

INSERT INTO [SERVICE] (SERVICE_ID, SERVICE_LEVEL, SERVICE_NAME, SERVICE_COST, SERVICE_DESCRIPTION, EQUIPMENT_REQUIRED)
VALUES (30003, 'Installation', 'Handbag System Installment', 670800.35, 'Implement Handbag System, Scan checked-in bags then deliever to designated carousel', 'Yes');

INSERT INTO [SERVICE] (SERVICE_ID, SERVICE_LEVEL, SERVICE_NAME, SERVICE_COST, SERVICE_DESCRIPTION, EQUIPMENT_REQUIRED)
VALUES (30004, 'Update', 'Automated People Mover Update ', 34500.0, 'Modify Automated People Mover, Check for any points of issue in the system', 'Yes');

INSERT INTO [SERVICE] (SERVICE_ID, SERVICE_LEVEL, SERVICE_NAME, SERVICE_COST, SERVICE_DESCRIPTION, EQUIPMENT_REQUIRED)
VALUES (30005, 'Inspection', 'Airport System Inspection', 5000.0, 'Inspect Airport for any issues with Automated People Mover or Handbag System ', 'No');


EXECUTE (N'BULK INSERT SERVICE_EQUIPMENT FROM ''' + @data_path + N'Service_equipment.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT PS_DETAIL FROM ''' + @data_path + N'ps_detail test.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

EXECUTE (N'BULK INSERT PE_DETAIL FROM ''' + @data_path + N'PE_DETAIL.csv''
WITH (FIELDTERMINATOR='','', ROWTERMINATOR=''\n'', FIRSTROW = 2, TABLOCK);');

-- STEP 4: Confirm row counts for all tables
SET NOCOUNT ON;
SELECT 'CLIENT' AS TableName, COUNT(*) AS Rows FROM CLIENT UNION
SELECT 'EMPLOYEE', COUNT(*) FROM EMPLOYEE UNION
SELECT 'AIRPORT', COUNT(*) FROM AIRPORT UNION
SELECT 'PROJECT', COUNT(*) FROM PROJECT UNION
SELECT 'EQUIPMENT', COUNT(*) FROM EQUIPMENT UNION
SELECT 'SERVICE', COUNT(*) FROM [SERVICE] UNION
SELECT 'SERVICE_EQUIPMENT', COUNT(*) FROM SERVICE_EQUIPMENT UNION
SELECT 'PS_DETAIL', COUNT(*) FROM PS_DETAIL UNION
SELECT 'PE_DETAIL', COUNT(*) FROM PE_DETAIL;
SET NOCOUNT OFF;
GO

-- VIEW: Total Project Cost per Client
IF OBJECT_ID('vw_TotalProjectCostPerClient', 'V') IS NOT NULL
    DROP VIEW vw_TotalProjectCostPerClient;
GO

GO
CREATE VIEW vw_TotalProjectCostPerClient AS
SELECT 
    C.CLIENT_ID,
    C.FIRST_NAME + ' ' + C.LAST_NAME AS CLIENT_NAME,
    SUM(P.PROJECT_BUDGET) AS TOTAL_BUDGET
FROM 
    CLIENT C
JOIN 
    PROJECT P ON C.CLIENT_ID = P.CLIENT_ID
GROUP BY 
    C.CLIENT_ID, C.FIRST_NAME, C.LAST_NAME;
GO

SELECT * FROM vw_TotalProjectCostPerClient;

-- Function: List of Services for a Project

IF OBJECT_ID('fn_ServicesByProject') IS NOT NULL
    DROP FUNCTION fn_ServicesByProject;
GO

GO
CREATE FUNCTION fn_ServicesByProject (@ProjectID INT)
RETURNS TABLE
AS
RETURN
    SELECT 
        S.SERVICE_ID,
        S.SERVICE_NAME,
        S.SERVICE_LEVEL,
        S.SERVICE_COST,
        S.EQUIPMENT_REQUIRED
    FROM 
        [SERVICE] S
    INNER JOIN 
        PS_DETAIL PS ON S.SERVICE_ID = PS.SERVICE_ID
    WHERE 
        PS.PROJECT_ID = @ProjectID;
GO


SELECT * FROM fn_ServicesByProject(50002);

-- Procedure: Insert a new Project 
IF OBJECT_ID('sp_AddNewProject', 'P') IS NOT NULL
    DROP PROCEDURE sp_AddNewProject;
GO

GO
CREATE PROCEDURE sp_AddNewProject
    @ProjectID INT,
    @ClientID INT,
    @AirportID INT,
    @Budget FLOAT,
    @Status NVARCHAR(20),
    @Description NVARCHAR(MAX)
AS
BEGIN
    INSERT INTO PROJECT (PROJECT_ID, CLIENT_ID, AIRPORT_ID, PROJECT_BUDGET, PROJECT_STATUS, PROJECT_DESCRIPTION)
    VALUES (@ProjectID, @ClientID, @AirportID, @Budget, @Status, @Description);
END;

GO

EXEC sp_AddNewProject 
    @ProjectID = 60002, 
    @ClientID = 2, 
    @AirportID = 10001, 
    @Budget = 890000, 
    @Status = 'Planned', 
    @Description = 'Runway extension';


SELECT *
FROM PROJECT

